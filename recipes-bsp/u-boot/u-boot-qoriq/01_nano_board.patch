diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index a76678d5d8..2263740add 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -1120,6 +1120,13 @@ config TARGET_LS1012AFRDM
 	  development platform that supports the QorIQ LS1012A
 	  Layerscape Architecture processor.
 
+config TARGET_LS1012ANANO
+	bool "Support ls1012anano"
+	select ARCH_LS1012A
+	select ARM64
+	help
+	  Support for INCOstartec NanoFW platform.
+
 config TARGET_LS1088ARDB
 	bool "Support ls1088ardb"
 	select ARCH_LS1088A
@@ -1492,6 +1499,7 @@ source "board/freescale/ls1046ardb/Kconfig"
 source "board/freescale/ls1012aqds/Kconfig"
 source "board/freescale/ls1012ardb/Kconfig"
 source "board/freescale/ls1012afrdm/Kconfig"
+source "board/freescale/ls1012anano/Kconfig"
 source "board/freescale/lx2160a/Kconfig"
 source "board/freescale/mx35pdk/Kconfig"
 source "board/freescale/s32v234evb/Kconfig"
diff --git a/arch/arm/cpu/armv8/Kconfig b/arch/arm/cpu/armv8/Kconfig
index aac3aebb44..fcadb897a3 100644
--- a/arch/arm/cpu/armv8/Kconfig
+++ b/arch/arm/cpu/armv8/Kconfig
@@ -102,7 +102,7 @@ config PSCI_RESET
 		   !TARGET_LS1088ARDB && !TARGET_LS1088AQDS && \
 		   !TARGET_LS1012ARDB && !TARGET_LS1012AFRDM && \
 		   !TARGET_LS1012A2G5RDB && !TARGET_LS1012AQDS && \
-		   !TARGET_LS1012AFRWY && \
+		   !TARGET_LS1012AFRWY && !TARGET_LS1012ANANO && \
 		   !TARGET_LS1043ARDB && !TARGET_LS1043AQDS && \
 		   !TARGET_LS1046ARDB && !TARGET_LS1046AQDS && \
 		   !TARGET_LS2081ARDB && !TARGET_LX2160ARDB && \
diff --git a/arch/arm/dts/fsl-ls1012a-nano.dts b/arch/arm/dts/fsl-ls1012a-nano.dts
new file mode 100644
index 0000000000..54af75a8c3
--- /dev/null
+++ b/arch/arm/dts/fsl-ls1012a-nano.dts
@@ -0,0 +1,40 @@
+/*
+ * Device Tree Include file for Freescale Layerscape-1012A family SoC.
+ *
+ * Copyright 2016, Freescale Semiconductor
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+/dts-v1/;
+/include/ "fsl-ls1012a.dtsi"
+
+/ {
+	model = "LS1012A NanoFW Board";
+	aliases {
+		spi0 = &qspi;
+	};
+};
+
+&qspi {
+	bus-num = <0>;
+	status = "okay";
+
+	qflash0: s25fl128s@0 {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "spi-flash";
+		spi-max-frequency = <20000000>;
+		reg = <0>;
+	};
+};
+
+&i2c0 {
+	status = "okay";
+};
+
+&duart0 {
+	status = "okay";
+};
diff --git a/board/freescale/ls1012anano/Kconfig b/board/freescale/ls1012anano/Kconfig
new file mode 100644
index 0000000000..4b72b77ac6
--- /dev/null
+++ b/board/freescale/ls1012anano/Kconfig
@@ -0,0 +1,23 @@
+if TARGET_LS1012ANANO
+
+config SYS_BOARD
+	default "ls1012anano"
+
+config SYS_VENDOR
+	default "freescale"
+
+config SYS_SOC
+	default "fsl-layerscape"
+
+config SYS_CONFIG_NAME
+	default "ls1012anano"
+
+config SYS_LS_PFE_FW_ADDR
+	hex "Flash address of PFE firmware"
+	default 0x40a00000
+
+config SYS_LS_PPA_FW_ADDR
+	hex "PPA Firmware Addr"
+	default 0x40400000
+
+endif
diff --git a/board/freescale/ls1012anano/MAINTAINERS b/board/freescale/ls1012anano/MAINTAINERS
new file mode 100644
index 0000000000..fcc293bff4
--- /dev/null
+++ b/board/freescale/ls1012anano/MAINTAINERS
@@ -0,0 +1,6 @@
+LS1012ANANO BOARD
+M:	Mario
+S:	Maintained
+F:	board/freescale/ls1012anano/
+F:	include/configs/ls1012anano.h
+F:	configs/ls1012anano_qspi_defconfig
diff --git a/board/freescale/ls1012anano/Makefile b/board/freescale/ls1012anano/Makefile
new file mode 100644
index 0000000000..4ec60f9628
--- /dev/null
+++ b/board/freescale/ls1012anano/Makefile
@@ -0,0 +1,8 @@
+#
+# Copyright 2016 Freescale Semiconductor, Inc.
+#
+# SPDX-License-Identifier:      GPL-2.0+
+#
+
+obj-y += ls1012anano.o
+obj-y += eth.o
diff --git a/board/freescale/ls1012anano/README b/board/freescale/ls1012anano/README
new file mode 100644
index 0000000000..3c04d84ada
--- /dev/null
+++ b/board/freescale/ls1012anano/README
@@ -0,0 +1,7 @@
+
+LS1012A SoC Overview
+--------------------
+Please refer arch/arm/cpu/armv8/fsl-layerscape/doc/README.soc for LS2080A
+SoC overview.
+
+
diff --git a/board/freescale/ls1012anano/eth.c b/board/freescale/ls1012anano/eth.c
new file mode 100644
index 0000000000..9ea275ea70
--- /dev/null
+++ b/board/freescale/ls1012anano/eth.c
@@ -0,0 +1,91 @@
+/*
+ * Copyright 2015-2016 Freescale Semiconductor, Inc.
+ * Copyright 2017 NXP
+ *
+ * SPDX-License-Identifier:GPL-2.0+
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <asm/io.h>
+#include <netdev.h>
+#include <fm_eth.h>
+#include <fsl_mdio.h>
+#include <malloc.h>
+#include <asm/types.h>
+#include <fsl_dtsec.h>
+#include <asm/arch/soc.h>
+#include <asm/arch-fsl-layerscape/config.h>
+#include <asm/arch-fsl-layerscape/immap_lsch2.h>
+#include <asm/arch/fsl_serdes.h>
+#include <net/pfe_eth/pfe_eth.h>
+#include <dm/platform_data/pfe_dm_eth.h>
+#include <i2c.h>
+
+#define DEFAULT_PFE_MDIO_NAME "PFE_MDIO"
+
+int pfe_eth_board_init(struct udevice *dev)
+{
+#ifdef CONFIG_FSL_PFE
+	struct mii_dev *bus;
+	struct pfe_mdio_info mac1_mdio_info;
+	struct pfe_eth_dev *priv = dev_get_priv(dev);
+
+	init_pfe_scfg_dcfg_regs();
+
+	mac1_mdio_info.reg_base = (void *)EMAC1_BASE_ADDR;
+	mac1_mdio_info.name = DEFAULT_PFE_MDIO_NAME;
+
+	bus = pfe_mdio_init(&mac1_mdio_info);
+	if (!bus) {
+		printf("Failed to register mdio\n");
+		return -1;
+	}
+
+	
+	pfe_set_mdio(priv->gemac_port,
+	    miiphy_get_dev_by_name(DEFAULT_PFE_MDIO_NAME));
+	
+	if (!priv->gemac_port) /* MAC1 */
+		pfe_set_phy_address_mode(0, CONFIG_PFE_EMAC1_PHY_ADDR,
+				     PHY_INTERFACE_MODE_SGMII);
+	else /* MAC2 */
+		pfe_set_phy_address_mode(1, CONFIG_PFE_EMAC2_PHY_ADDR,
+				     PHY_INTERFACE_MODE_RGMII_TXID);
+#endif
+	return 0;
+}
+
+static struct pfe_eth_pdata pfe_pdata0 = {
+	.pfe_eth_pdata_mac = {
+		.iobase = (phys_addr_t)EMAC1_BASE_ADDR,
+		.phy_interface = 0,
+	},
+
+	.pfe_ddr_addr = {
+		.ddr_pfe_baseaddr = (void *)CONFIG_DDR_PFE_BASEADDR,
+		.ddr_pfe_phys_baseaddr = CONFIG_DDR_PFE_PHYS_BASEADDR,
+	},
+};
+
+static struct pfe_eth_pdata pfe_pdata1 = {
+	.pfe_eth_pdata_mac = {
+		.iobase = (phys_addr_t)EMAC2_BASE_ADDR,
+		.phy_interface = 1,
+	},
+
+	.pfe_ddr_addr = {
+		.ddr_pfe_baseaddr = (void *)CONFIG_DDR_PFE_BASEADDR,
+		.ddr_pfe_phys_baseaddr = CONFIG_DDR_PFE_PHYS_BASEADDR,
+	},
+};
+
+U_BOOT_DEVICE(ls1012a_pfe0) = {
+	.name = "pfe_eth",
+	.platdata = &pfe_pdata0,
+};
+
+U_BOOT_DEVICE(ls1012a_pfe1) = {
+	.name = "pfe_eth",
+	.platdata = &pfe_pdata1,
+};
diff --git a/board/freescale/ls1012anano/ls1012anano.c b/board/freescale/ls1012anano/ls1012anano.c
new file mode 100644
index 0000000000..f98b48e9a8
--- /dev/null
+++ b/board/freescale/ls1012anano/ls1012anano.c
@@ -0,0 +1,149 @@
+/*
+ * Copyright 2016 Freescale Semiconductor, Inc.
+ * Copyright 2018 Telco-Tech GmbH
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <i2c.h>
+#include <asm/io.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/fsl_serdes.h>
+#ifdef CONFIG_FSL_LS_PPA
+#include <asm/arch/ppa.h>
+#endif
+#include <asm/arch/mmu.h>
+#include <asm/arch/soc.h>
+#include <hwconfig.h>
+#include <ahci.h>
+#include <mmc.h>
+#include <scsi.h>
+#include <fsl_esdhc.h>
+#include <environment.h>
+#include <fsl_mmdc.h>
+#include <netdev.h>
+#include <fsl_sec.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+int checkboard(void)
+{
+	puts("Board: LS1012A NanoFW\n");
+
+	return 0;
+}
+
+int dram_init(void)
+{
+	static const struct fsl_mmdc_info mparam = {
+		0x05280000,	/* MDCTL COLS:11, ROWS:16, BL:8 */
+		0x0002002d,	/* MDPDC CKSRE:5, CKSRX:5, CKE:3 */
+		0x09005000,	/* MDOTC AOFPD:2, AONPD:2, ODTLon:5 */
+		0xaeb357a4,	/* MDCFG0 CL:7, FAW:27, RFC:175, XS:360, XP:3, XPDLL:12 */
+		0xdb538e64,	/* MDCFG1 CWL:6, WR:8, RAS:20, RC:27, RP:7, RCD:7 */
+		0x01ff00db,	/* MDCFG2 RRD:4, WTR:4, RTP:4 */
+		0x00001680,	/* MDMISC RALAT:2, Bank Interleaving: on */
+		0x0f3c8000,	/* MDREF */
+		0x00002000,	/* MDRWD */
+		0x00bf1023,	/* MDOR */
+		0x0000003f,	/* MDASP */
+		0x0000022a,	/* MPODTCTRL */
+		0xa1390003,	/* MPZQHWCTRL */
+	};
+
+	mmdc_init(&mparam);
+
+	gd->ram_size = CONFIG_SYS_SDRAM_SIZE;
+
+#if !defined(CONFIG_SPL) || defined(CONFIG_SPL_BUILD)
+	/* This will break-before-make MMU for DDR */
+	update_early_mmu_table();
+#endif
+
+	return 0;
+}
+
+
+int board_early_init_f(void)
+{
+	fsl_lsch2_early_init_f();
+
+	return 0;
+}
+
+int board_init(void)
+{
+	struct ccsr_cci400 *cci = (struct ccsr_cci400 *)(CONFIG_SYS_IMMR +
+					CONFIG_SYS_CCI400_OFFSET);
+	/*
+	 * Set CCI-400 control override register to enable barrier
+	 * transaction
+	 */
+	out_le32(&cci->ctrl_ord, CCI400_CTRLORD_EN_BARRIER);
+
+#ifdef CONFIG_SYS_FSL_ERRATUM_A010315
+	erratum_a010315();
+#endif
+
+#ifdef CONFIG_ENV_IS_NOWHERE
+	gd->env_addr = (ulong)&default_environment[0];
+#endif
+
+#ifdef CONFIG_FSL_CAAM
+	sec_init();
+#endif
+
+#ifdef CONFIG_FSL_LS_PPA
+	ppa_init();
+#endif
+	return 0;
+}
+
+#ifdef CONFIG_OF_LIBFDT
+int esdhc_status_fixup(void *blob, const char *compat)
+{
+	return 0;
+}
+#endif
+
+
+/**
+ * setup config for phy & phy or phy & switch
+ */
+static int ft_ethernet_fixup(void *fdt) {
+	const char *mode[] = { "rgmii-txid", "sgmii" };
+	uint32_t ksz;
+	int offs;
+
+	i2c_set_bus_num(0);
+
+	ksz = !i2c_probe(I2C_KSZ_ADDR);
+
+	/* mdio for second mac must be disabled for phy mode, enabled for ksz switch */
+	fdt_find_and_setprop(fdt, "/pfe@04000000/ethernet@1/mdio@0", "reg", &ksz, 4, 0);
+
+	/* set mode for phy (RGMII) or switch (SGMII) */
+	fdt_find_and_setprop(fdt, "/pfe@04000000/ethernet@1", "phy-mode", mode[ksz], strlen(mode[ksz]) + 1, 0);
+
+	/* remove configuration if no switch chip is available */
+	if (!ksz && (offs = fdt_path_offset(fdt, "/pfe@04000000/ethernet@1/ksz9897@0")) > 0)
+		fdt_del_node(fdt, offs);
+
+	/* remove second phy config if switch is available */
+	if (ksz && (offs = fdt_path_offset(fdt, "/pfe@04000000/ethernet@0/ethernet-phy@1")) > 0)
+		fdt_del_node(fdt, offs);
+
+	return 0;
+}
+
+int ft_board_setup(void *blob, bd_t *bd)
+{
+	arch_fixup_fdt(blob);
+
+	ft_cpu_setup(blob, bd);
+
+	ft_ethernet_fixup(blob);
+
+	return 0;
+}
diff --git a/configs/ls1012anano_qspi_defconfig b/configs/ls1012anano_qspi_defconfig
new file mode 100644
index 0000000000..ea647be49e
--- /dev/null
+++ b/configs/ls1012anano_qspi_defconfig
@@ -0,0 +1,55 @@
+CONFIG_ARM=y
+CONFIG_TARGET_LS1012ANANO=y
+CONFIG_SYS_TEXT_BASE=0x40100000
+CONFIG_FSL_LS_PPA=y
+CONFIG_QSPI_AHB_INIT=y
+CONFIG_DEFAULT_DEVICE_TREE="fsl-ls1012a-nano"
+# CONFIG_SYS_MALLOC_F is not set
+CONFIG_FIT_VERBOSE=y
+CONFIG_OF_BOARD_SETUP=y
+CONFIG_OF_STDOUT_VIA_ALIAS=y
+CONFIG_SYS_EXTRA_OPTIONS="QSPI_BOOT"
+CONFIG_QSPI_BOOT=y
+CONFIG_BOOTDELAY=3
+# CONFIG_DISPLAY_BOARDINFO is not set
+CONFIG_HUSH_PARSER=y
+CONFIG_CMD_GREPENV=y
+CONFIG_CMD_GPT=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_SF=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_USB=y
+# CONFIG_CMD_SETEXPR is not set
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_EXT2=y
+# CONFIG_CMD_FAT is not set
+CONFIG_OF_CONTROL=y
+CONFIG_NET_RANDOM_ETHADDR=y
+CONFIG_DM=y
+# CONFIG_BLK is not set
+CONFIG_DM_MMC=y
+# CONFIG_DM_MMC_OPS is not set
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH=y
+CONFIG_DM_ETH=y
+CONFIG_NETDEVICES=y
+# CONFIG_E1000 is not set
+CONFIG_FSL_PFE=y
+CONFIG_PCI=y
+CONFIG_DM_PCI=y
+CONFIG_DM_PCI_COMPAT=y
+CONFIG_PCIE_LAYERSCAPE=y
+CONFIG_SYS_NS16550=y
+CONFIG_DM_SPI=y
+CONFIG_FSL_DSPI=y
+CONFIG_USB=y
+CONFIG_DM_USB=y
+CONFIG_USB_XHCI_HCD=y
+CONFIG_USB_XHCI_DWC3=y
+CONFIG_USB_STORAGE=y
+CONFIG_DISTRO_DEFAULTS=y
+CONFIG_CMD_BOOTEFI=y
+CONFIG_EFI_LOADER=y
diff --git a/include/configs/ls1012anano.h b/include/configs/ls1012anano.h
new file mode 100644
index 0000000000..af12a1a9db
--- /dev/null
+++ b/include/configs/ls1012anano.h
@@ -0,0 +1,116 @@
+/*
+ * Copyright 2016 Freescale Semiconductor, Inc.
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef __LS1012ANANO_H__
+#define __LS1012ANANO_H__
+
+#include "ls1012a_common.h"
+
+/*SPI device */
+#ifdef CONFIG_QSPI_BOOT
+#define CONFIG_SPI_FLASH_ISSI
+
+/* undef S25FS512S QSPI Flash (from ls1012a_common.h) */
+#ifdef FSL_QSPI_FLASH_SIZE
+#undef FSL_QSPI_FLASH_SIZE
+#endif
+
+/* IS25WP128 */
+#define FSL_QSPI_FLASH_SIZE	SZ_16M
+
+#endif
+
+/* PFE Ethernet */
+#ifdef CONFIG_FSL_PFE
+#define EMAC1_PHY_ADDR          0x2
+#define EMAC2_PHY_ADDR          0x1
+#define CONFIG_PHY_TI
+#endif
+
+/* DDR */
+#define CONFIG_DIMM_SLOTS_PER_CTLR	1
+#define CONFIG_CHIP_SELECTS_PER_CTRL	1
+#define CONFIG_NR_DRAM_BANKS		2
+#define CONFIG_SYS_SDRAM_SIZE		0x80000000
+#define CONFIG_CMD_MEMINFO
+#define CONFIG_CMD_MEMTEST
+#define CONFIG_SYS_MEMTEST_START	0x80000000
+#define CONFIG_SYS_MEMTEST_END		0x9fffffff
+
+
+#ifndef CONFIG_SPL_BUILD
+#undef BOOT_TARGET_DEVICES
+#define BOOT_TARGET_DEVICES(func) \
+	func(USB, usb, 0)
+#endif
+
+/*
+ * optional KSZ9897
+ */
+
+#define I2C_KSZ_ADDR		0x5f
+
+#undef CONFIG_EXTRA_ENV_SETTINGS
+#define CONFIG_EXTRA_ENV_SETTINGS		\
+	"verify=no\0"				\
+	"fdt_high=0xffffffffffffffff\0"		\
+	"initrd_high=0xffffffffffffffff\0"	\
+	"fdt_addr=0x00f00000\0"			\
+	"kernel_addr=0x01000000\0"		\
+	"kernelheader_addr=0x800000\0"		\
+	"scriptaddr=0x80000000\0"		\
+	"scripthdraddr=0x80080000\0"		\
+	"fdtheader_addr_r=0x80100000\0"		\
+	"kernelheader_addr_r=0x80200000\0"	\
+	"kernel_addr_r=0x81000000\0"		\
+	"fdt_addr_r=0x90000000\0"		\
+	"load_addr=0xa0000000\0"		\
+	"kernel_size=0x2800000\0"		\
+	"kernelheader_size=0x40000\0"		\
+	"console=ttyS0,115200\0"		\
+	BOOTENV					\
+	"boot_scripts=ls1012anano_boot.scr\0"	\
+	"boot_script_hdr=hdr_ls1012anano_bs.out\0"	\
+	"scan_dev_for_boot_part="		\
+	     "part list ${devtype} ${devnum} devplist; "	\
+	     "env exists devplist || setenv devplist 1; "	\
+	     "for distro_bootpart in ${devplist}; do "		\
+		  "if fstype ${devtype} "			\
+		      "${devnum}:${distro_bootpart} "		\
+		      "bootfstype; then "			\
+		      "run scan_dev_for_boot; "	\
+		  "fi; "			\
+	      "done\0"				\
+	"scan_dev_for_boot="				  \
+		"echo Scanning ${devtype} "		  \
+				"${devnum}:${distro_bootpart}...; "  \
+		"for prefix in ${boot_prefixes}; do "	  \
+			"run scan_dev_for_scripts; "	  \
+		"done;"					  \
+		"\0"					  \
+	"boot_a_script="				  \
+		"load ${devtype} ${devnum}:${distro_bootpart} "  \
+			"${scriptaddr} ${prefix}${script}; "    \
+		"env exists secureboot && load ${devtype} "     \
+			"${devnum}:${distro_bootpart} "		\
+			"${scripthdraddr} ${prefix}${boot_script_hdr} " \
+			"&& esbc_validate ${scripthdraddr};"    \
+		"source ${scriptaddr}\0"	  \
+	"installer=load mmc 0:2 $load_addr "	\
+		   "/flex_installer_arm64.itb; "	\
+		   "bootm $load_addr#$board\0"	\
+	"itb_bootcmd=echo Trying load from sd..;"	\
+		   "pfe stop; " \
+		   "load mmc 0:1 $load_addr /Image.itb; " \
+		   "bootm $load_addr\0"
+
+#undef CONFIG_BOOTCOMMAND
+#if defined(CONFIG_QSPI_BOOT) || defined(CONFIG_SD_BOOT_QSPI)
+#define CONFIG_BOOTCOMMAND "run distro_bootcmd; run itb_bootcmd; " \
+			   "env exists secureboot && esbc_halt;"
+#endif
+
+#endif /* __LS1012ANANO_H__ */
