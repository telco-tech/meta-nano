diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 5d33526ae9..b807b231a1 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -1308,6 +1308,13 @@ config TARGET_LS1012AFRDM
 	  development platform that supports the QorIQ LS1012A
 	  Layerscape Architecture processor.
 
+config TARGET_LS1012ANANO
+	bool "Support ls1012a nano"
+	select ARCH_LS1012A
+	select ARM64
+	help
+	  Support for INCOstartec Nano platform.
+
 config TARGET_LS1028AQDS
 	bool "Support ls1028aqds"
 	select ARCH_LS1028A
@@ -1795,6 +1802,7 @@ source "board/freescale/ls1046afrwy/Kconfig"
 source "board/freescale/ls1012aqds/Kconfig"
 source "board/freescale/ls1012ardb/Kconfig"
 source "board/freescale/ls1012afrdm/Kconfig"
+source "board/freescale/ls1012a-nano/Kconfig"
 source "board/freescale/lx2160a/Kconfig"
 source "board/freescale/mx35pdk/Kconfig"
 source "board/freescale/s32v234evb/Kconfig"
diff --git a/arch/arm/cpu/armv8/Kconfig b/arch/arm/cpu/armv8/Kconfig
index 92a2b58ed4..2c61d77e3b 100644
--- a/arch/arm/cpu/armv8/Kconfig
+++ b/arch/arm/cpu/armv8/Kconfig
@@ -103,7 +103,7 @@ config PSCI_RESET
 		   !TARGET_LS1088ARDB && !TARGET_LS1088AQDS && \
 		   !TARGET_LS1012ARDB && !TARGET_LS1012AFRDM && \
 		   !TARGET_LS1012A2G5RDB && !TARGET_LS1012AQDS && \
-		   !TARGET_LS1012AFRWY && \
+		   !TARGET_LS1012AFRWY && !TARGET_LS1012ANANO && \
 		   !TARGET_LS1028ARDB && !TARGET_LS1028AQDS && \
 		   !TARGET_LS1043ARDB && !TARGET_LS1043AQDS && \
 		   !TARGET_LS1046ARDB && !TARGET_LS1046AQDS && \
diff --git a/arch/arm/dts/Makefile b/arch/arm/dts/Makefile
index 8d7d5bee45..7af9e7b15b 100644
--- a/arch/arm/dts/Makefile
+++ b/arch/arm/dts/Makefile
@@ -360,7 +360,8 @@ dtb-$(CONFIG_FSL_LSCH2) += fsl-ls1043a-qds-duart.dtb \
 	fsl-ls1012a-rdb.dtb \
 	fsl-ls1012a-2g5rdb.dtb \
 	fsl-ls1012a-frdm.dtb \
-	fsl-ls1012a-frwy.dtb
+	fsl-ls1012a-frwy.dtb \
+	fsl-ls1012a-nano.dtb
 
 dtb-$(CONFIG_TARGET_DRAGONBOARD410C) += dragonboard410c.dtb
 dtb-$(CONFIG_TARGET_DRAGONBOARD820C) += dragonboard820c.dtb
diff --git a/arch/arm/dts/fsl-ls1012a-nano.dts b/arch/arm/dts/fsl-ls1012a-nano.dts
new file mode 100644
index 0000000000..a4b9dfa06b
--- /dev/null
+++ b/arch/arm/dts/fsl-ls1012a-nano.dts
@@ -0,0 +1,40 @@
+/*
+ * Device Tree Include file for Freescale Layerscape-1012A family SoC.
+ *
+ * Copyright 2016, Freescale Semiconductor
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+/dts-v1/;
+/include/ "fsl-ls1012a.dtsi"
+
+/ {
+	model = "LS1012A Nano Board";
+	aliases {
+		spi0 = &qspi;
+	};
+};
+
+&qspi {
+	bus-num = <0>;
+	status = "okay";
+
+	qflash0: is25wp128s@0 {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "spi-flash";
+		spi-max-frequency = <20000000>;
+		reg = <0>;
+	};
+};
+
+&i2c0 {
+	status = "okay";
+};
+
+&duart0 {
+	status = "okay";
+};
diff --git a/board/freescale/ls1012a-nano/Kconfig b/board/freescale/ls1012a-nano/Kconfig
new file mode 100644
index 0000000000..32f277fa19
--- /dev/null
+++ b/board/freescale/ls1012a-nano/Kconfig
@@ -0,0 +1,27 @@
+if TARGET_LS1012ANANO
+
+config SYS_BOARD
+       default "ls1012a-nano"
+
+config SYS_VENDOR
+       default "freescale"
+
+config SYS_SOC
+       default "fsl-layerscape"
+
+config SYS_CONFIG_NAME
+       default "ls1012anano"
+
+config SYS_LS_PFE_FW_ADDR
+       hex "Flash address of PFE firmware"
+       default 0x40a00000
+
+config SYS_LS_PPA_FW_ADDR
+       hex "PPA Firmware Addr"
+       default 0x40400000
+
+config SYS_PFE_HW_ADDR
+       hex "PFE Ethernet Addr"
+       default 0x40040000
+
+endif
diff --git a/board/freescale/ls1012a-nano/MAINTAINERS b/board/freescale/ls1012a-nano/MAINTAINERS
new file mode 100644
index 0000000000..53d746d50a
--- /dev/null
+++ b/board/freescale/ls1012a-nano/MAINTAINERS
@@ -0,0 +1,6 @@
+LS1012ANANO BOARD
+M:	Mario
+S:	Maintained
+F:	board/freescale/ls1012a-nano/
+F:	include/configs/ls1012anano.h
+F:	configs/ls1012anano_qspi_defconfig
diff --git a/board/freescale/ls1012a-nano/Makefile b/board/freescale/ls1012a-nano/Makefile
new file mode 100644
index 0000000000..4ec60f9628
--- /dev/null
+++ b/board/freescale/ls1012a-nano/Makefile
@@ -0,0 +1,8 @@
+#
+# Copyright 2016 Freescale Semiconductor, Inc.
+#
+# SPDX-License-Identifier:      GPL-2.0+
+#
+
+obj-y += ls1012anano.o
+obj-y += eth.o
diff --git a/board/freescale/ls1012a-nano/README b/board/freescale/ls1012a-nano/README
new file mode 100644
index 0000000000..3c04d84ada
--- /dev/null
+++ b/board/freescale/ls1012a-nano/README
@@ -0,0 +1,7 @@
+
+LS1012A SoC Overview
+--------------------
+Please refer arch/arm/cpu/armv8/fsl-layerscape/doc/README.soc for LS2080A
+SoC overview.
+
+
diff --git a/board/freescale/ls1012a-nano/eth.c b/board/freescale/ls1012a-nano/eth.c
new file mode 100644
index 0000000000..4932d8e2f6
--- /dev/null
+++ b/board/freescale/ls1012a-nano/eth.c
@@ -0,0 +1,116 @@
+/*
+ * Copyright 2015-2016 Freescale Semiconductor, Inc.
+ * Copyright 2017 NXP
+ *
+ * SPDX-License-Identifier:GPL-2.0+
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <asm/io.h>
+#include <netdev.h>
+#include <fm_eth.h>
+#include <fsl_mdio.h>
+#include <malloc.h>
+#include <asm/types.h>
+#include <fsl_dtsec.h>
+#include <asm/arch/soc.h>
+#include <asm/arch-fsl-layerscape/config.h>
+#include <asm/arch-fsl-layerscape/immap_lsch2.h>
+#include <asm/arch/fsl_serdes.h>
+#include <net/pfe_eth/pfe_eth.h>
+#include <dm/platform_data/pfe_dm_eth.h>
+#include <i2c.h>
+
+#define DEFAULT_PFE_MDIO0_NAME "PFE_MDIO0"
+#define DEFAULT_PFE_MDIO1_NAME "PFE_MDIO1"
+
+int pfe_eth_board_init(struct udevice *dev)
+{
+#ifdef CONFIG_FSL_PFE
+	static int init_done = 0;
+	struct mii_dev *bus;
+	struct pfe_mdio_info mac_mdio_info;
+	struct pfe_eth_dev *priv = dev_get_priv(dev);
+	char *p;
+
+	if (! init_done) {
+		init_pfe_scfg_dcfg_regs();
+
+		mac_mdio_info.reg_base = (void *)EMAC1_BASE_ADDR;
+		mac_mdio_info.name = DEFAULT_PFE_MDIO0_NAME;
+
+		bus = pfe_mdio_init(&mac_mdio_info);
+		if (!bus) {
+			printf("Failed to register mdio\n");
+			return -1;
+		}
+
+		init_done = 1;
+	}
+
+	if (priv->gemac_port) {
+		mac_mdio_info.reg_base = (void *)EMAC2_BASE_ADDR;
+		mac_mdio_info.name = DEFAULT_PFE_MDIO1_NAME;
+		bus = pfe_mdio_init(&mac_mdio_info);
+		if (!bus) {
+			printf("Failed to register mdio\n");
+			return -1;
+		}
+	}
+
+	pfe_set_mdio(priv->gemac_port,
+	    miiphy_get_dev_by_name(DEFAULT_PFE_MDIO0_NAME));
+	
+	if (!priv->gemac_port) /* MAC1 */
+		pfe_set_phy_address_mode(0, CONFIG_PFE_EMAC1_PHY_ADDR,
+				     PHY_INTERFACE_MODE_SGMII);
+	else /* MAC2 */
+		pfe_set_phy_address_mode(1, CONFIG_PFE_EMAC2_PHY_ADDR,
+				     PHY_INTERFACE_MODE_RGMII_TXID);
+
+	p = CONFIG_SYS_PFE_HW_ADDR;
+
+	if (p[0] != 0xff)
+		eth_env_set_enetaddr("ethaddr", p);
+
+	if (p[6] != 0xff)
+		eth_env_set_enetaddr("eth1addr", p + 6);
+
+#endif
+	return 0;
+}
+
+static struct pfe_eth_pdata pfe_pdata0 = {
+	.pfe_eth_pdata_mac = {
+		.iobase = (phys_addr_t)EMAC1_BASE_ADDR,
+		.phy_interface = 0,
+	},
+
+	.pfe_ddr_addr = {
+		.ddr_pfe_baseaddr = (void *)CONFIG_DDR_PFE_BASEADDR,
+		.ddr_pfe_phys_baseaddr = CONFIG_DDR_PFE_PHYS_BASEADDR,
+	},
+};
+
+static struct pfe_eth_pdata pfe_pdata1 = {
+	.pfe_eth_pdata_mac = {
+		.iobase = (phys_addr_t)EMAC2_BASE_ADDR,
+		.phy_interface = 1,
+	},
+
+	.pfe_ddr_addr = {
+		.ddr_pfe_baseaddr = (void *)CONFIG_DDR_PFE_BASEADDR,
+		.ddr_pfe_phys_baseaddr = CONFIG_DDR_PFE_PHYS_BASEADDR,
+	},
+};
+
+U_BOOT_DEVICE(ls1012a_pfe0) = {
+	.name = "pfe_eth",
+	.platdata = &pfe_pdata0,
+};
+
+U_BOOT_DEVICE(ls1012a_pfe1) = {
+	.name = "pfe_eth",
+	.platdata = &pfe_pdata1,
+};
diff --git a/board/freescale/ls1012a-nano/ls1012anano.c b/board/freescale/ls1012a-nano/ls1012anano.c
new file mode 100644
index 0000000000..5f2010788e
--- /dev/null
+++ b/board/freescale/ls1012a-nano/ls1012anano.c
@@ -0,0 +1,185 @@
+/*
+ * Copyright 2016 Freescale Semiconductor, Inc.
+ * Copyright 2018 Telco-Tech GmbH
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <i2c.h>
+#include <asm/io.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/fsl_serdes.h>
+#ifdef CONFIG_FSL_LS_PPA
+#include <asm/arch/ppa.h>
+#endif
+#include <asm/arch/mmu.h>
+#include <asm/arch/soc.h>
+#include <hwconfig.h>
+#include <ahci.h>
+#include <mmc.h>
+#include <scsi.h>
+#include <fsl_esdhc.h>
+#include <fsl_mmdc.h>
+#include <netdev.h>
+#include <fsl_sec.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+int checkboard(void)
+{
+	puts("Board: LS1012A NanoFW\n");
+
+	return 0;
+}
+
+int dram_init(void)
+{
+	static const struct fsl_mmdc_info mparam = {
+		0x05280000,	/* MDCTL COLS:11, ROWS:16, BL:8 */
+		0x0002002d,	/* MDPDC CKSRE:5, CKSRX:5, CKE:3 */
+		0x09005000,	/* MDOTC AOFPD:2, AONPD:2, ODTLon:5 */
+		0xaeb357a4,	/* MDCFG0 CL:7, FAW:27, RFC:175, XS:360, XP:3, XPDLL:12 */
+		0xdb538e64,	/* MDCFG1 CWL:6, WR:8, RAS:20, RC:27, RP:7, RCD:7 */
+		0x01ff00db,	/* MDCFG2 RRD:4, WTR:4, RTP:4 */
+		0x00001680,	/* MDMISC RALAT:2, Bank Interleaving: on */
+		0x0f3c8000,	/* MDREF */
+		0x00002000,	/* MDRWD */
+		0x00bf1023,	/* MDOR */
+		0x0000003f,	/* MDASP */
+		0x0000022a,	/* MPODTCTRL */
+		0xa1390003,	/* MPZQHWCTRL */
+	};
+
+	mmdc_init(&mparam);
+
+	gd->ram_size = CONFIG_SYS_SDRAM_SIZE;
+
+#if !defined(CONFIG_SPL) || defined(CONFIG_SPL_BUILD)
+	/* This will break-before-make MMU for DDR */
+	update_early_mmu_table();
+#endif
+
+	return 0;
+}
+
+
+int board_early_init_f(void)
+{
+	fsl_lsch2_early_init_f();
+
+	return 0;
+}
+
+int board_init(void)
+{
+	struct ccsr_cci400 *cci = (struct ccsr_cci400 *)(CONFIG_SYS_IMMR +
+					CONFIG_SYS_CCI400_OFFSET);
+	/*
+	 * Set CCI-400 control override register to enable barrier
+	 * transaction
+	 */
+	out_le32(&cci->ctrl_ord, CCI400_CTRLORD_EN_BARRIER);
+
+#ifdef CONFIG_SYS_FSL_ERRATUM_A010315
+	erratum_a010315();
+#endif
+
+#ifdef CONFIG_ENV_IS_NOWHERE
+	gd->env_addr = (ulong)&default_environment[0];
+#endif
+
+#ifdef CONFIG_FSL_CAAM
+	sec_init();
+#endif
+
+#ifdef CONFIG_FSL_LS_PPA
+	ppa_init();
+#endif
+	return 0;
+}
+
+int esdhc_status_fixup(void *blob, const char *compat)
+{
+	char esdhc0_path[] = "/soc/esdhc@1560000";
+	char esdhc1_path[] = "/soc/esdhc@1580000";
+
+	do_fixup_by_path(blob, esdhc0_path, "status", "okay",
+			 sizeof("okay"), 1);
+
+	do_fixup_by_path(blob, esdhc1_path, "status", "okay",
+			 sizeof("okay"), 1);
+	return 0;
+}
+
+
+static int set_phy_handle(void *fdt, const char *path) {
+	uint32_t phandle;
+	int offs;
+
+	do {
+		if ((offs = fdt_path_offset(fdt, path)) < 0)
+			break;
+
+		if ((phandle = fdt_create_phandle(fdt, offs)) == 0)
+			break;
+
+		phandle = cpu_to_fdt32(phandle);
+
+		if ((offs = fdt_path_offset(fdt, "/pfe@4000000/ethernet@1")) < 0)
+			break;
+
+		if (fdt_setprop(fdt, offs, "phy-handle", &phandle, sizeof(phandle)) < 0)
+			break;
+
+		return 0;
+	} while (0);
+
+	return -1;
+}
+
+
+/**
+ * setup config for phy & phy or phy & switch
+ */
+static int ft_ethernet_fixup(void *fdt) {
+	const char *mode[] = { "rgmii-txid", "sgmii" };
+	const char *phy[] = { "/pfe@4000000/mdio@0/ethernet-phy@1", "/soc/i2c@2180000/ksz9897@5f/mdio@0/ethernet-phy@6" };
+	uint32_t ksz;
+	int offs;
+	char *p;
+
+	i2c_set_bus_num(0);
+
+	ksz = !i2c_probe(I2C_KSZ_ADDR);
+
+	/* set mode for phy (RGMII) or switch (SGMII) */
+	fdt_find_and_setprop(fdt, "/pfe@4000000/ethernet@1", "phy-mode", mode[ksz], strlen(mode[ksz]) + 1, 0);
+
+	if ((offs = fdt_path_offset(fdt, phy[!ksz])) > 0)
+		fdt_del_node(fdt, offs);
+
+	set_phy_handle(fdt, phy[ksz]);
+
+	/* set ethernet address from qspi to device tree */
+	p = CONFIG_SYS_PFE_HW_ADDR;
+
+	if (p[0] != 0xff)
+		fdt_find_and_setprop(fdt, "/pfe@4000000/ethernet@0", "local-mac-address", p, 6, 1);
+
+	if (p[6] != 0xff)
+		fdt_find_and_setprop(fdt, "/pfe@4000000/ethernet@1", "local-mac-address", p + 6, 6, 1);
+
+	return 0;
+}
+
+int ft_board_setup(void *blob, bd_t *bd)
+{
+	arch_fixup_fdt(blob);
+
+	ft_cpu_setup(blob, bd);
+
+	ft_ethernet_fixup(blob);
+
+	return 0;
+}
diff --git a/configs/ls1012anano_qspi_defconfig b/configs/ls1012anano_qspi_defconfig
new file mode 100644
index 0000000000..7ea59fe575
--- /dev/null
+++ b/configs/ls1012anano_qspi_defconfig
@@ -0,0 +1,58 @@
+CONFIG_ARM=y
+CONFIG_TARGET_LS1012ANANO=y
+CONFIG_SYS_TEXT_BASE=0x40100000
+# CONFIG_FSL_LS_PPA is not set
+CONFIG_QSPI_AHB_INIT=y
+CONFIG_DEFAULT_DEVICE_TREE="fsl-ls1012a-nano"
+# CONFIG_SYS_MALLOC_F is not set
+CONFIG_FIT=y
+CONFIG_FIT_VERBOSE=y
+CONFIG_OF_BOARD_SETUP=y
+CONFIG_OF_STDOUT_VIA_ALIAS=y
+CONFIG_SYS_EXTRA_OPTIONS="QSPI_BOOT"
+CONFIG_QSPI_BOOT=y
+CONFIG_BOOTDELAY=3
+CONFIG_ENV_IS_IN_SPI_FLASH=y
+# CONFIG_DISPLAY_BOARDINFO is not set
+CONFIG_HUSH_PARSER=y
+CONFIG_CMD_GREPENV=y
+CONFIG_CMD_GPT=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_SF=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_USB=y
+# CONFIG_CMD_SETEXPR is not set
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_EXT2=y
+# CONFIG_CMD_FAT is not set
+CONFIG_OF_CONTROL=y
+CONFIG_NET_RANDOM_ETHADDR=y
+CONFIG_DM=y
+CONFIG_BLK=y
+CONFIG_DM_MMC=y
+# CONFIG_DM_MMC_OPS is not set
+CONFIG_SPI=y
+CONFIG_SPI_FLASH=y
+CONFIG_DM_SPI=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_FSL_QSPI=y
+CONFIG_DM_ETH=y
+CONFIG_NETDEVICES=y
+# CONFIG_E1000 is not set
+CONFIG_FSL_PFE=y
+CONFIG_PCI=y
+CONFIG_DM_PCI=y
+CONFIG_DM_PCI_COMPAT=y
+CONFIG_PCIE_LAYERSCAPE=y
+CONFIG_SYS_NS16550=y
+CONFIG_USB=y
+CONFIG_DM_USB=y
+CONFIG_USB_XHCI_HCD=y
+CONFIG_USB_XHCI_DWC3=y
+CONFIG_USB_STORAGE=y
+CONFIG_DISTRO_DEFAULTS=y
+CONFIG_CMD_BOOTEFI=y
+CONFIG_EFI_LOADER=y
diff --git a/include/configs/ls1012anano.h b/include/configs/ls1012anano.h
new file mode 100644
index 0000000000..ecbef597aa
--- /dev/null
+++ b/include/configs/ls1012anano.h
@@ -0,0 +1,133 @@
+/*
+ * Copyright 2016 Freescale Semiconductor, Inc.
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef __LS1012ANANO_H__
+#define __LS1012ANANO_H__
+
+#include "ls1012a_common.h"
+
+/*SPI device */
+#ifdef CONFIG_QSPI_BOOT
+#define CONFIG_SPI_FLASH_ISSI
+
+/* undef S25FS512S QSPI Flash (from ls1012a_common.h) */
+#ifdef FSL_QSPI_FLASH_SIZE
+#undef FSL_QSPI_FLASH_SIZE
+#endif
+
+/* IS25WP128 */
+#define FSL_QSPI_FLASH_SIZE	SZ_16M
+
+#endif
+/*  MMC  */
+#ifdef CONFIG_MMC
+#define CONFIG_FSL_ESDHC
+#define CONFIG_SYS_FSL_MMC_HAS_CAPBLT_VS33
+#endif
+
+/* PFE Ethernet */
+#ifdef CONFIG_FSL_PFE
+#define EMAC1_PHY_ADDR          0x2
+#define EMAC2_PHY_ADDR          0x1
+#define CONFIG_PHY_TI
+#endif
+
+/* DDR */
+#define CONFIG_DIMM_SLOTS_PER_CTLR	1
+#define CONFIG_CHIP_SELECTS_PER_CTRL	1
+#ifdef CONFIG_NR_DRAM_BANKS
+#undef CONFIG_NR_DRAM_BANKS
+#endif
+#define CONFIG_NR_DRAM_BANKS		2
+#define CONFIG_SYS_SDRAM_SIZE		0x80000000
+#define CONFIG_CMD_MEMINFO
+#define CONFIG_CMD_MEMTEST
+#define CONFIG_SYS_MEMTEST_START	0x80000000
+#define CONFIG_SYS_MEMTEST_END		0x9fffffff
+
+
+#ifndef CONFIG_SPL_BUILD
+#undef BOOT_TARGET_DEVICES
+#define BOOT_TARGET_DEVICES(func) \
+	func(USB, usb, 0)
+#endif
+
+/*
+ * optional KSZ9897
+ */
+
+#define I2C_KSZ_ADDR		0x5f
+
+#undef CONFIG_EXTRA_ENV_SETTINGS
+#define CONFIG_EXTRA_ENV_SETTINGS		\
+	"verify=no\0"				\
+	"fdt_high=0xffffffffffffffff\0"		\
+	"initrd_high=0xffffffffffffffff\0"	\
+	"fdt_addr=0x00f00000\0"			\
+	"kernel_addr=0x01000000\0"		\
+	"kernelheader_addr=0x800000\0"		\
+	"scriptaddr=0x80000000\0"		\
+	"scripthdraddr=0x80080000\0"		\
+	"fdtheader_addr_r=0x80100000\0"		\
+	"kernelheader_addr_r=0x80200000\0"	\
+	"kernel_addr_r=0x81000000\0"		\
+	"fdt_addr_r=0x90000000\0"		\
+	"load_addr=0xa0000000\0"		\
+	"kernel_size=0x2800000\0"		\
+	"kernelheader_size=0x40000\0"		\
+	"console=ttyS0,115200\0"		\
+	"dtb_load=0xa0200000\0"			\
+	BOOTENV					\
+	"mmc_installer=echo Trying load installer from sd card..;"	\
+		   "load mmc 0:2 $load_addr "	\
+		   "/flex_installer_arm64.itb; "	\
+		   "pfe stop; " \
+		   "bootm $load_addr#conf@fsl-$board.dtb\0"	\
+	"dhcp_installer=echo Trying load installer from network..;"	\
+		   "setenv ethaddr 00:11:22:33:44:55;" \
+		   "dhcp $load_addr; "	\
+		   "pfe stop; " \
+		   "setenv bootargs console=$console; " \
+		   "bootm $load_addr#conf@fsl-$board.dtb\0"	\
+	"efi_env=" \
+		   "mmc dev 1 1; " \
+		   "mw $dtb_load 62757267 1; " \
+		   "mmc read $load_addr 0 1; " \
+		   "mmc rescan; " \
+		   "if cmp $load_addr $dtb_load 1; " \
+		      "then env import -t $load_addr; " \
+		   "fi\0" \
+	"emmc_bootcmd=" \
+		   "run efi_env; " \
+		   "if test -n $grubefi_start; " \
+		      "then echo Trying load efi bootmgr from boot0 device...;" \
+		      "mmc dev 1 1; " \
+		      "mmc read $load_addr $grubefi_start $grubefi_size; " \
+		      "if test -n $dtb_start; " \
+		         "then mmc read $dtb_load $dtb_start $dtb_size; " \
+		      "fi; " \
+		      "pfe stop; " \
+		      "mmc dev 1;" \
+		      "bootefi $load_addr $dtb_load; " \
+		   "elif load mmc 1:1 $load_addr /boot/itbImage; then " \
+		      "echo Trying load from emmc..;"	\
+		      "setenv bootargs console=$console root=/dev/mmcblk1p1 rootwait; " \
+		      "pfe stop; " \
+		      "bootm $load_addr; fi\0" \
+		   "fi\0" \
+	"mmc_bootcmd=echo Trying load from sd card..;"	\
+		   "if load mmc 0:1 $load_addr /itbImage; then " \
+		   "setenv bootargs console=$console root=/dev/mmcblk0p1 rootwait; " \
+		   "pfe stop; " \
+		   "bootm $load_addr; fi\0"
+
+#undef CONFIG_BOOTCOMMAND
+#if defined(CONFIG_QSPI_BOOT) || defined(CONFIG_SD_BOOT_QSPI)
+#define CONFIG_BOOTCOMMAND "run emmc_bootcmd; run mmc_bootcmd; run dhcp_installer; run mmc_installer;" \
+			   "env exists secureboot && esbc_halt;"
+#endif
+
+#endif /* __LS1012ANANO_H__ */
